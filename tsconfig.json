{
    "compilerOptions": {
      "outDir": "./dist/",
      // указание, куда производится сборка. Не имеет особого значения, т к все равно сборка идет через webpack
      "noImplicitAny": true,
      // не позволяет использовать переменные без явного указания типа. Однако, например, тип any все еще можно использовать, 
      // если его явно указать
      "module": "ESNext",
      // выбор модульный системы, сборки модулей - т е например будет import/export или commonJS(require() modules exports)
      // обычно ставится es6 или ESNext. На бекенде - commonJS
      "target": "es5",
      // код будет компилироваться в ECMAscript 2009(ES5), для расширения поддержки браузеров
      "jsx": "react-jsx",
      // позволяет исп. jsx
      "allowJs": true,
      // позволяет компилятору отрабатывать не только ts, но и js файлы
      "moduleResolution": "node",
      // определяет, какие импорты будут - лишь значения node/classic. в 99% случаях - node, поэтому не суть
      //
      "baseUrl": ".",
      // для абсолютного импорта - не нужно будет в начале импортов ставить ./ (?)
      "paths": {
        "*": ["./src/*"]
      },
      "esModuleInterop": true,
      // esModuleInterop - позволяет с пакетами, использующими старый синтаксис common js(синтаксис require() module.exports),
      // работать, как с обычными пакетами(import/export)
      "allowSyntheticDefaultImports": true
      // многие библиотеки(пакеты) (особенно написанные на node.js) не имеют export default. С allowSyntheticDefaultImports проблема решается,
      // и при каждом импорте в webpack.config.ts не надо писать "import * as name from 'library-name' - можно просто import name 
  },
  // ts-node установлен в DevDependencies. Он нужен для выполнения tsconfig.json, но он выполняет по умолчанию только commonJS. Чтобы работал
  // не только с commonJS, ниже прописываются следующие строчки:
  "ts-node": {
    "compilerOptions": {
      "module": "CommonJS"
    }
  }
}